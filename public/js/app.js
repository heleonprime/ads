/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/drivers/html_driver.js":
/*!************************************!*\
  !*** ./src/drivers/html_driver.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HTMLDriver)\n/* harmony export */ });\nclass HTMLDriver {\r\n    debug = 0;\r\n    debugLabel = \"%cMPSU HTML Driver\";\r\n    debugStyles = \"color:white; background-color: #3f8be8; padding: 2px 5px; border-radius: 3px;\";\r\n    debugGroupOpened = false;\r\n\r\n    container = null;\r\n\r\n    html = '';\r\n    inIframe = false;\r\n    iframe = null;\r\n\r\n    impressionTimeoutDuration = 2000;\r\n    impressionTimeout = null;\r\n\r\n    options = {\r\n        iframeStyles: {\r\n            border: '0',\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n        }\r\n    };\r\n\r\n    clickHandler = null;\r\n    clickTarget = null;\r\n\r\n    scriptsLoaded = {};\r\n\r\n    codePosition = 'beforeend';\r\n\r\n    constructor(settings, events) {\r\n        this.setOption(settings, 'debug');\r\n        this.setOption(settings, 'container');\r\n        this.setOption(settings, 'html');\r\n        this.setOption(settings, 'inIframe');\r\n        this.setOption(settings, 'impressionTimeoutDuration');\r\n\r\n        this.setEvents(events)\r\n        this.mergeOptions(settings);\r\n    }\r\n\r\n    setOption(s, o) {\r\n        if (typeof s[o] !== 'undefined') {\r\n            this[o] = s[o];\r\n        }\r\n    }\r\n\r\n    setImpressionTimeout() {\r\n        this.impressionTimeout = setTimeout(() => {\r\n            this.l('Impression Timeout fired');\r\n            this.events.onImpression();\r\n        }, this.impressionTimeoutDuration);\r\n    }\r\n\r\n    drop(onEvent = false) {\r\n        //this. = null;\r\n    }\r\n\r\n    setEvents = (events) => {\r\n        const eventsDefault = {\r\n            onClose: () => { },\r\n            onStop: () => { },\r\n            onError: () => { },\r\n            onImpression: () => { },\r\n            onClick: () => { },\r\n        }\r\n        this.events = { ...eventsDefault, ...events }\r\n    }\r\n\r\n    // Settings \r\n\r\n    mergeOptions(o1, o2) {\r\n        this.l('Options are object', this.isObject(o2));\r\n        if (this.isObject(o2))\r\n            o1 = {\r\n                ...o1,\r\n                ...o2\r\n            }\r\n        this.l('Options: ', o1);\r\n        return o1;\r\n    }\r\n    isObject(e) {\r\n        return typeof e === 'object' &&\r\n            !Array.isArray(e) &&\r\n            e !== null;\r\n    }\r\n\r\n    show(container) {\r\n        if (container) this.container = container;\r\n        this.clearContainer();\r\n        this.addCode();\r\n        this.setImpressionTimeout();\r\n    }\r\n\r\n    clearContainer() {\r\n        this.l('Clearing container');\r\n        this.l(this.clickTarget);\r\n        this.l(this.clickHandler);\r\n        if (this.clickTarget && this.clickHandler) {\r\n            this.clickTarget.removeEventListener(\"click\", this.clickHandler);\r\n        }\r\n        this.l(this.container);\r\n        if (this.container) {\r\n            this.container.innerHTML = \"\";\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        this.clearContainer();\r\n        this.events.onStop();\r\n    }\r\n\r\n    refresh() {\r\n        this.clearContainer();\r\n        this.show();\r\n    }\r\n\r\n    addCode() {\r\n        if (this.container && this.html) {\r\n            let c;\r\n            if (this.inIframe) {\r\n                this.iframe = document.createElement('iframe');\r\n                this.setIframeStyles();\r\n                this.container.appendChild(this.iframe);\r\n                c = this.iframe.contentWindow.document.body;\r\n                c.style.margin = '0';\r\n            }\r\n            else {\r\n                c = this.container;\r\n            }\r\n            c.insertAdjacentHTML(this.codePosition, this.html);\r\n            let scripts = c.querySelectorAll('script');\r\n            if (scripts.length) {\r\n                scripts.forEach((script) => {\r\n                    this.recreateScript(script);\r\n                })\r\n            }\r\n            this.clickHandler = this.click.bind(this)\r\n            this.l('Click handler:', this.clickHandler);\r\n            this.clickTarget = c; //this.iframe ?? this.container;\r\n            this.l('Click target:', this.clickTarget);\r\n            this.clickTarget.addEventListener(\"click\", this.clickHandler);\r\n        }\r\n    }\r\n\r\n    setIframeStyles() {\r\n        if (this.options.iframeStyles) {\r\n            Object.keys(this.options.iframeStyles).forEach((k) => {\r\n                this.iframe.style[k] = this.options.iframeStyles[k];\r\n            });\r\n        }\r\n    }\r\n\r\n    copyAttributes(source, target) {\r\n        return Array.from(source.attributes).forEach(attribute => {\r\n            target.setAttribute(\r\n                attribute.nodeName === 'id' ? 'data-id' : attribute.nodeName,\r\n                attribute.nodeValue,\r\n            );\r\n        });\r\n    }\r\n\r\n    recreateScript(script) {\r\n        let s = document.createElement('script');\r\n        this.copyAttributes(script, s);\r\n        script.before(s);\r\n        s.innerHTML = script.innerHTML;\r\n        script.remove();\r\n    }\r\n\r\n    click() {\r\n        this.l('Click event fired')\r\n        this.events.onClick();\r\n    }\r\n\r\n    // Debug\r\n\r\n    l(...args) {\r\n        if (this.debug) {\r\n            if (!this.debugGroupOpened)\r\n                console.log(this.debugLabel, this.debugStyles, ...args);\r\n            else\r\n                console.log(...args);\r\n        }\r\n    }\r\n\r\n    lg(label = \"\") {\r\n        if (this.debug && !this.debugGroupOpened) {\r\n            this.debugGroupOpened = true;\r\n            console.groupCollapsed(this.debugLabel, this.debugStyles, label);\r\n        }\r\n    }\r\n\r\n    lge() {\r\n        if (this.debug && this.debugGroupOpened) {\r\n            this.debugGroupOpened = false;\r\n            console.groupEnd();\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://ads/./src/drivers/html_driver.js?");

/***/ }),

/***/ "./src/drivers/image_driver.js":
/*!*************************************!*\
  !*** ./src/drivers/image_driver.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ImageDriver)\n/* harmony export */ });\nclass ImageDriver {\r\n    debug = 0;\r\n    debugLabel = \"%cMPSU Image Driver\";\r\n    debugStyles = \"color:white; background-color: #3f8be8; padding: 2px 5px; border-radius: 3px;\";\r\n    debugGroupOpened = false;\r\n\r\n    container = null;\r\n\r\n    url = '';\r\n    link = null;\r\n    title = null;\r\n    inNewTab = false;\r\n    inIframe = false;\r\n    iframe = null;\r\n\r\n    impressionTimeoutDuration = 2000;\r\n    impressionTimeout = null;\r\n\r\n    options = {\r\n        iframeStyles: {\r\n            border: '0',\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n        },\r\n        imageStyles: {\r\n\r\n        }\r\n    };\r\n\r\n    clickHandler = null;\r\n    clickTarget = null;\r\n\r\n    scriptsLoaded = {};\r\n\r\n    codePosition = 'beforeend';\r\n\r\n    image = null;\r\n\r\n    constructor(settings, events) {\r\n        this.setOption(settings, 'debug');\r\n        this.setOption(settings, 'container');\r\n        this.setOption(settings, 'url');\r\n        this.setOption(settings, 'inIframe');\r\n        this.setOption(settings, 'link');\r\n        this.setOption(settings, 'inNewTab');\r\n        this.setOption(settings, 'title');\r\n        this.setOption(settings, 'impressionTimeoutDuration');\r\n\r\n        this.setEvents(events);\r\n        this.mergeOptions(settings);\r\n    }\r\n\r\n    setOption(s, o) {\r\n        if (typeof s[o] !== 'undefined') {\r\n            this[o] = s[o];\r\n        }\r\n    }\r\n\r\n    setImpressionTimeout() {\r\n        this.impressionTimeout = setTimeout(() => {\r\n            this.l('Impression Timeout fired');\r\n            this.events.onImpression();\r\n        }, this.impressionTimeoutDuration);\r\n    }\r\n\r\n\r\n    drop(onEvent = false) {\r\n        //this. = null;\r\n    }\r\n\r\n    setEvents = (events) => {\r\n        const eventsDefault = {\r\n            onClose: () => { },\r\n            onStop: () => { },\r\n            onError: () => { },\r\n            onImpression: () => { },\r\n            onClick: () => { },\r\n        }\r\n        this.events = { ...eventsDefault, ...events }\r\n    }\r\n\r\n    // Settings \r\n\r\n    mergeOptions(o1, o2) {\r\n        this.l('Options are object', this.isObject(o2));\r\n        if (this.isObject(o2))\r\n            o1 = {\r\n                ...o1,\r\n                ...o2\r\n            }\r\n        this.l('Options: ', o1);\r\n        return o1;\r\n    }\r\n    isObject(e) {\r\n        return typeof e === 'object' &&\r\n            !Array.isArray(e) &&\r\n            e !== null;\r\n    }\r\n\r\n    show(container) {\r\n        if (container) this.container = container;\r\n        this.clearContainer();\r\n        this.addCode();\r\n        this.setImpressionTimeout();\r\n    }\r\n\r\n    clearContainer() {\r\n        this.l('Clearing container');\r\n        this.l(this.clickTarget);\r\n        this.l(this.clickHandler);\r\n        if (this.clickTarget && this.clickHandler) {\r\n            this.clickTarget.removeEventListener(\"click\", this.clickHandler);\r\n        }\r\n        this.l(this.container);\r\n        if (this.container) {\r\n            this.container.innerHTML = \"\";\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        this.clearContainer();\r\n        this.events.onStop();\r\n    }\r\n\r\n    refresh() {\r\n        this.clearContainer();\r\n        this.show();\r\n    }\r\n\r\n    addCode() {\r\n        if (this.container && this.url) {\r\n            let c = null;\r\n            if (this.inIframe) {\r\n                this.iframe = document.createElement('iframe');\r\n                this.setIframeStyles();\r\n                this.container.appendChild(this.iframe);\r\n                c = this.iframe.contentWindow.document.body;\r\n                c.style.margin = '0';\r\n            }\r\n            else {\r\n                c = this.container;\r\n            }\r\n\r\n            let target = null;\r\n\r\n            this.image = document.createElement('img');\r\n            this.image.src = this.url;\r\n\r\n            if (this.link) {\r\n                let link = document.createElement('a');\r\n                link.href = this.link;\r\n                if (this.inNewTab) {\r\n                    link.target = \"_blank\";\r\n                    link.rel = \"noopener noreferrer\";\r\n                }\r\n                if (this.title) {\r\n                    link.title = this.title;\r\n                }\r\n                link.appendChild(this.image);\r\n                target = link;\r\n            }\r\n            else {\r\n                target = this.image;\r\n            }\r\n\r\n            this.l(c);\r\n            c.appendChild(target);\r\n\r\n            this.clickHandler = this.click.bind(this)\r\n            this.l('Click handler:', this.clickHandler);\r\n            this.clickTarget = c; //this.iframe ?? this.container;\r\n            this.l('Click target:', this.clickTarget);\r\n            this.clickTarget.addEventListener(\"click\", this.clickHandler);\r\n        }\r\n    }\r\n\r\n    setIframeStyles() {\r\n        if (this.options.iframeStyles) {\r\n            Object.keys(this.options.iframeStyles).forEach((k) => {\r\n                this.iframe.style[k] = this.options.iframeStyles[k];\r\n            });\r\n        }\r\n    }\r\n\r\n    click() {\r\n        this.l('Click event fired')\r\n        this.events.onClick();\r\n    }\r\n\r\n    // Debug\r\n\r\n    l(...args) {\r\n        if (this.debug) {\r\n            if (!this.debugGroupOpened)\r\n                console.log(this.debugLabel, this.debugStyles, ...args);\r\n            else\r\n                console.log(...args);\r\n        }\r\n    }\r\n\r\n    lg(label = \"\") {\r\n        if (this.debug && !this.debugGroupOpened) {\r\n            this.debugGroupOpened = true;\r\n            console.groupCollapsed(this.debugLabel, this.debugStyles, label);\r\n        }\r\n    }\r\n\r\n    lge() {\r\n        if (this.debug && this.debugGroupOpened) {\r\n            this.debugGroupOpened = false;\r\n            console.groupEnd();\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://ads/./src/drivers/image_driver.js?");

/***/ }),

/***/ "./src/drivers/prebid_driver.js":
/*!**************************************!*\
  !*** ./src/drivers/prebid_driver.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PrebidDriver)\n/* harmony export */ });\nclass PrebidDriver {\r\n  adUnitId = null;\r\n  parentContainer = null;\r\n  bannerContainer = null;\r\n  debug = 0;\r\n  timeout = 2000;\r\n  adUnit = null;\r\n  requestBidsObj = null;\r\n  preferredCurrency = 'RUB';\r\n  unsoldRefreshTimeout = 1000;\r\n  maxFailedRequests = 2;\r\n  failedRequestsCount = 0;\r\n  impressionTimeoutDuration = 2000;\r\n  impressionTimeout = null;\r\n  clickHandler = null;\r\n  clickTarget = null;\r\n\r\n  pbConfig = {\r\n    currency: {\r\n      adServerCurrency: \"RUB\",\r\n      granularityMultiplier: 1,\r\n      defaultRates: {\r\n        \"USD\": { \"RUB\": 96.21 },\r\n        \"EUR\": { \"RUB\": 102.80 },\r\n      }\r\n    },\r\n    firstPartyData: {\r\n      uaHints: [\r\n        \"architecture\",\r\n        \"model\",\r\n        \"platform\",\r\n        \"platformVersion\",\r\n        \"fullVersionList\"\r\n      ]\r\n    },\r\n    userSync: {\r\n      userIds: [{\r\n        name: \"sharedId\",\r\n        storage: {\r\n          type: \"cookie\",\r\n          name: \"_sharedid\",\r\n          expires: 180\r\n        }\r\n      },\r\n      {\r\n        name: \"adriverId\"\r\n      },\r\n      {\r\n        name: 'pairId'\r\n      }\r\n      ]\r\n    },\r\n    realTimeData: {\r\n      auctionDelay: 100,\r\n      dataProviders: [\r\n        {\r\n          \"name\": \"intersection\",\r\n          \"waitForIt\": true\r\n        }\r\n      ],\r\n    },\r\n    enableTIDs: true,\r\n    deviceAccess: true,\r\n    allowActivities: {\r\n      syncUser: {\r\n        default: true,\r\n        rules: [\r\n          { allow: true }\r\n        ]\r\n      },\r\n      accessDevice: {\r\n        default: true,\r\n        rules: [\r\n          { allow: true }\r\n        ]\r\n      }\r\n    }\r\n  };\r\n\r\n  constructor(settings, events) {\r\n    if (!settings.id) {\r\n      this.l(\"No Ad unit ID set for Prebid driver\");\r\n      return false;\r\n    }\r\n    this.adUnitId = settings.id;\r\n    if (!settings.config) {\r\n      this.l(this.adUnitId + \" No Ad unit Prebid config found\");\r\n      return false;\r\n    }\r\n    this.adUnit = settings.config;\r\n    if (settings && settings.pbConfig) {\r\n      this.pbConfig = settings.pbConfig;\r\n    }\r\n    if (settings && settings.timeout) {\r\n      this.timeout = settings.timeout;\r\n    }\r\n\r\n    if (new URLSearchParams(window.location.search).get('pbjs_debug') == 'true')\r\n      this.debug = 1;\r\n\r\n    this.requestBidsObj = {\r\n      timeout: this.timeout,\r\n      bidsBackHandler: this.responseHandler.bind(this)\r\n    };\r\n\r\n    window.pbjs = window.pbjs || {};\r\n    window.pbjs.que = window.pbjs.que || [];\r\n\r\n    window.pbjs.que.push(() => {\r\n      window.pbjs.setConfig(this.pbConfig);\r\n    });\r\n\r\n    this.setEvents(events)\r\n  }\r\n\r\n  setEvents = (events) => {\r\n    const eventsDefault = {\r\n      onClose: () => { },\r\n      onStop: () => { },\r\n      onError: () => { },\r\n      onImpression: () => { },\r\n      onClick: () => { },\r\n    }\r\n\r\n    this.events = { ...eventsDefault, ...events }\r\n  }\r\n\r\n  setImpressionTimeout() {\r\n    this.impressionTimeout = setTimeout(() => {\r\n      this.l('Impression Timeout fired');\r\n      this.events.onImpression();\r\n    }, this.impressionTimeoutDuration);\r\n  }\r\n\r\n  show(parentContainer) {\r\n    if (parentContainer)\r\n      this.parentContainer = parentContainer;\r\n\r\n    if (!this.parentContainer) {\r\n      console.log(this.adUnitId + \" Container is not available for this banner, can't show\");\r\n      return false;\r\n    }\r\n    this.bannerContainer = document.createElement('div');\r\n    this.bannerContainer.id = this.adUnitId;\r\n    this.parentContainer.append(this.bannerContainer);\r\n\r\n    this.requestBids();\r\n  }\r\n\r\n  hide() {\r\n    this.clearContainer();\r\n    this.events.onStop();\r\n  }\r\n\r\n  clearContainer() {\r\n    this.l('Clearing container');\r\n    this.l(this.clickTarget);\r\n    this.l(this.clickHandler);\r\n    if (this.clickTarget && this.clickHandler) {\r\n      this.clickTarget.removeEventListener(\"click\", this.clickHandler);\r\n    }\r\n    this.l(this.container);\r\n    if (this.bannerContainer) {\r\n      this.bannerContainer.innerHTML = \"\";\r\n    }\r\n  }\r\n\r\n  refresh() {\r\n    this.requestBids();\r\n  }\r\n\r\n  requestBids() {\r\n    this.l(this.adUnitId + ' Requesting bids');\r\n    window.pbjs.que.push(() => {\r\n      window.pbjs.addAdUnits([this.adUnit]);\r\n      window.pbjs.requestBids(this.requestBidsObj);\r\n      window.pbjs.removeAdUnit(this.adUnit.code);\r\n    });\r\n  }\r\n\r\n  addCode(bid, position = 'beforeend') {\r\n    this.l(this.adUnitId + ' adding code');\r\n    let iframe = document.createElement('iframe');\r\n    iframe.frameBorder = '0';\r\n    iframe.scrolling = \"no\";\r\n    iframe.style = 'width:' + bid.width + 'px;height:' + bid.height + 'px;overflow:hidden';\r\n    this.clearContainer();\r\n    if (bid.ad) {\r\n      this.bannerContainer.appendChild(iframe);\r\n      let iframeDoc = iframe.contentWindow.document;\r\n      iframeDoc.body.style = 'margin: 0;'\r\n      iframeDoc.body.insertAdjacentHTML(position, bid.ad);\r\n      let scripts = iframeDoc.body.querySelectorAll('script');\r\n      if (scripts.length) {\r\n        scripts.forEach((script) => {\r\n          this.createScript(script);\r\n        })\r\n      }\r\n    }\r\n    else if (bid.adUrl) {\r\n      iframe.src = bid.adUrl;\r\n      this.bannerContainer.appendChild(iframe);\r\n    }\r\n  }\r\n  copyAttributes(source, target) {\r\n    return Array.from(source.attributes).forEach(attribute => {\r\n      target.setAttribute(\r\n        attribute.nodeName,\r\n        attribute.nodeValue,\r\n      );\r\n    });\r\n  }\r\n  createScript(script) {\r\n    let s = document.createElement('script');\r\n    this.copyAttributes(script, s);\r\n    script.before(s);\r\n    s.innerHTML = script.innerHTML;\r\n    script.remove();\r\n  }\r\n\r\n  responseHandler(bidResponses) {\r\n    this.l(this.adUnitId + ' Responses recieved:', bidResponses);\r\n    let adUnitsIds = Object.keys(bidResponses);\r\n    if (adUnitsIds.length) {\r\n      this.failedRequestsCount = 0;\r\n      adUnitsIds.forEach((adUnitId) => {\r\n        const winningBid = bidResponses[adUnitId].bids.reduce((prev, current) => (prev.cpm > current.cpm ? prev : current));\r\n        this.l(this.adUnitId + ' Winning bid:', winningBid);\r\n\r\n        if (this.bannerContainer) {\r\n          this.addCode(winningBid);\r\n          this.setImpressionTimeout();\r\n          this.clickHandler = this.click.bind(this)\r\n          this.l('Click handler:', this.clickHandler);\r\n          this.clickTarget = this.bannerContainer;\r\n          this.l('Click target:', this.clickTarget);\r\n          this.clickTarget.addEventListener(\"click\", this.clickHandler);\r\n        }\r\n        else {\r\n          this.l(this.adUnitId + \" No container with Ad unit ID in DOM\");\r\n          return false;\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      this.failedRequestsCount++;\r\n      this.l(this.adUnitId + ' No bids recieved');\r\n      if (this.failedRequestsCount >= this.maxFailedRequests) {\r\n        this.failedRequestsCount = 0;\r\n        this.l(this.adUnitId + ' Already tried refresh. Failed again. Quit');\r\n      }\r\n      else {\r\n        this.l(this.adUnitId + ' Will retry in ' + (this.unsoldRefreshTimeout / 1000) + 'sec');\r\n        let _self = this;\r\n        setTimeout(() => {\r\n          this.l(this.adUnitId + ' Refreshing now!');\r\n          this.refresh();\r\n        }, this.unsoldRefreshTimeout);\r\n      }\r\n    }\r\n  }\r\n\r\n  click() {\r\n    this.l('Click event fired')\r\n    this.events.onClick();\r\n  }\r\n\r\n  l(...args) {\r\n    if (this.debug) console.log(...args)\r\n  }\r\n}\n\n//# sourceURL=webpack://ads/./src/drivers/prebid_driver.js?");

/***/ }),

/***/ "./src/drivers/rewarded_driver.js":
/*!****************************************!*\
  !*** ./src/drivers/rewarded_driver.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RewardedDriver)\n/* harmony export */ });\nclass RewardedDriver {\r\n    debug = 0;\r\n    debugLabel = \"%cMPSU Yandex Rewarded Driver\";\r\n    debugStyles = \"color:white; background-color: #3f8be8; padding: 2px 5px; border-radius: 3px;\";\r\n    debugGroupOpened = false;\r\n\r\n    selector = null;\r\n    button = null;\r\n    btnEvent = null;\r\n\r\n    options = {};\r\n\r\n    scriptsLoaded = {};\r\n    sdkURL = 'https://yandex.ru/ads/system/context.js';\r\n    status = 'created';\r\n    timeout = 5000;\r\n\r\n    impressionTimeoutDuration = 2000;\r\n    impressionTimeout = null;\r\n\r\n    buttonEvents = {\r\n        onRewarded: (e) => {\r\n            if (e) {\r\n                this.l('Successfully rewarded');\r\n                this.status = 'rewarded';\r\n                this.events.onRewarded();\r\n            }\r\n            else {\r\n                this.l('User has cancelled the ad');\r\n                this.status = 'cancelled';\r\n            }\r\n            this.events.onClose();\r\n            this.button.disabled = false;\r\n            this.hide();\r\n        },\r\n        onRender: () => {\r\n            this.status = 'rendered';\r\n            this.l('Ad rendered');\r\n            this.setImpressionTimeout();\r\n        },\r\n        onError: (d) => {\r\n            this.status = 'error';\r\n            this.l('Error:', d);\r\n            this.events.onError();\r\n            this.button.disabled = false;\r\n            this.hide();\r\n        },\r\n    }\r\n\r\n    constructor(settings, events) {\r\n        this.debug = settings?.debug ?? 0\r\n        this.selector = settings?.selector ?? null;\r\n\r\n        window.yaContextCb = window.yaContextCb || [];\r\n\r\n        this.loadSDK(this.sdkURL)\r\n        this.setEvents(events)\r\n        this.mergeOptions(settings);\r\n    }\r\n\r\n\r\n    drop(onEvent = false) {\r\n        //this. = null;\r\n    }\r\n\r\n    setEvents = (events) => {\r\n        const eventsDefault = {\r\n            onClose: () => { },\r\n            onStop: () => { },\r\n            onError: () => { },\r\n            onRewarded: () => { },\r\n            onImpression: () => { },\r\n            onClick: () => { },\r\n        }\r\n        this.events = { ...eventsDefault, ...events }\r\n    }\r\n\r\n    setImpressionTimeout() {\r\n        this.impressionTimeout = setTimeout(() => {\r\n            this.l('Impression Timeout fired');\r\n            this.events.onImpression();\r\n        }, this.impressionTimeoutDuration);\r\n    }\r\n\r\n    // Settings \r\n\r\n    mergeOptions(o) {\r\n        this.l('Options are object', this.isObject(o));\r\n        if (this.isObject(o))\r\n            this.options = {\r\n                ...this.options,\r\n                ...o\r\n            }\r\n        this.l('Options: ', this.options)\r\n    }\r\n    isObject(e) {\r\n        return typeof e === 'object' &&\r\n            !Array.isArray(e) &&\r\n            e !== null;\r\n    }\r\n\r\n    show(selector) {\r\n        if (selector) this.selector = selector;\r\n        this.button = document.querySelector(this.selector);\r\n        if (this.button) {\r\n            this.handleButton();\r\n            this.status = 'ready';\r\n        }\r\n        else {\r\n            this.l('Can\\'t find button element in DOM')\r\n        }\r\n    }\r\n\r\n    handleButton() {\r\n        this.btnEvent = (e) => { this.buttonClickEvent(e) };\r\n        this.button.addEventListener('click', this.btnEvent);\r\n    }\r\n\r\n    buttonClickEvent(e) {\r\n        this.l('Button click fired');\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if (this.button.disabled) {\r\n            // Doing nothing\r\n            this.l('Already in use');\r\n        }\r\n        else {\r\n            this.status = 'clicked';\r\n            setTimeout(() => {\r\n                if (this.status === 'clicked') {\r\n                    this.l('The Ad was not rendered. Stopping the script');\r\n                    this.hide();\r\n                }\r\n            }, this.timeout);\r\n            this.button.disabled = true;\r\n            this.l('Starting to show the ad')\r\n            window.yaContextCb.push(() => {\r\n                this.l('Platform', Ya?.Context?.AdvManager?.getPlatform());\r\n                this.l('AdvManager', Ya?.Context?.AdvManager);\r\n                let adOpts = this.options.ads[(Ya.Context.AdvManager.getPlatform() === 'desktop' ? 'desktop' : 'mobile')];\r\n                this.setAdsEvents(adOpts);\r\n                Ya.Context.AdvManager.render(adOpts);\r\n            });\r\n        }\r\n    }\r\n\r\n    setAdsEvents(adOpts) {\r\n        adOpts.onRewarded = this.buttonEvents.onRewarded;\r\n        adOpts.onRender = this.buttonEvents.onRender;\r\n        adOpts.onError = this.buttonEvents.onError;\r\n    }\r\n\r\n    hide() {\r\n        if (this.button) {\r\n            this.button.removeEventListener('click', this.btnEvent ?? (() => { }));\r\n            this.button.disabled = false;\r\n        }\r\n        this.events.onStop();\r\n    }\r\n\r\n    refresh() {\r\n        this.handleButton();\r\n    }\r\n\r\n    loadSDK(url, callback) {\r\n        this.l('LOADING SDK');\r\n        if (typeof this.scriptsLoaded[this.sdkURL] === 'undefined' && !document.querySelector('script[src=\"' + this.sdkURL + '\"]')) {\r\n            this.l('Starting to load SDK');\r\n            this.scriptsLoaded[this.sdkURL] = { isLoaded: false }\r\n            var script = document.createElement('script');\r\n            script.src = url;\r\n            this.scriptsLoaded[this.sdkURL].script = script;\r\n            document.body.appendChild(script);\r\n            this.l('SCRIPT!', script);\r\n        }\r\n    }\r\n\r\n    // Debug\r\n\r\n    l(...args) {\r\n        if (this.debug) {\r\n            if (!this.debugGroupOpened)\r\n                console.log(this.debugLabel, this.debugStyles, ...args);\r\n            else\r\n                console.log(...args);\r\n        }\r\n    }\r\n\r\n    lg(label = \"\") {\r\n        if (this.debug && !this.debugGroupOpened) {\r\n            this.debugGroupOpened = true;\r\n            console.groupCollapsed(this.debugLabel, this.debugStyles, label);\r\n        }\r\n    }\r\n\r\n    lge() {\r\n        if (this.debug && this.debugGroupOpened) {\r\n            this.debugGroupOpened = false;\r\n            console.groupEnd();\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://ads/./src/drivers/rewarded_driver.js?");

/***/ }),

/***/ "./src/drivers/vk_driver.js":
/*!**********************************!*\
  !*** ./src/drivers/vk_driver.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VkDriver)\n/* harmony export */ });\nclass VkDriver {\r\n    debug = 0;\r\n    debugLabel = \"%cMPSU Vk Driver\";\r\n    debugStyles = \"color:white; background-color: #3f8be8; padding: 2px 5px; border-radius: 3px;\";\r\n    debugGroupOpened = false;\r\n\r\n    container = null;\r\n    slotId = null;\r\n    adContainer = null;\r\n\r\n    adStyles = {\r\n        display: 'inline-block',\r\n        width: '240px',\r\n        height: '400px',\r\n        textDecoration: \"none\",\r\n    }\r\n\r\n    options = {};\r\n\r\n    impressionTimeoutDuration = 2000;\r\n    impressionTimeout = null;\r\n    clickHandler = null;\r\n    clickTarget = null;\r\n\r\n    scriptsLoaded = {};\r\n    sdkURL = 'https://ad.mail.ru/static/ads-async.js';\r\n\r\n    adOptions = {\r\n        onAdsLoaded: (data) => {\r\n            this.l('onAdsLoaded', data)\r\n            this.setImpressionTimeout();\r\n            this.clickHandler = this.click.bind(this)\r\n            this.l('Click handler:', this.clickHandler);\r\n            this.clickTarget = this.adContainer; //this.iframe ?? this.container;\r\n            this.l('Click target:', this.clickTarget);\r\n        },\r\n        onAdsRefreshed: () => {\r\n            this.l('onAdsRefreshed')\r\n        },\r\n        onAdsClosed: (slot) => {\r\n            this.l('onAdsClosed', slot)\r\n            this.events.onClose();\r\n            this.hide();\r\n        },\r\n        onNoAds: (data) => {\r\n            this.l('No ads recieved for ' + data.slot)\r\n            this.l(data.slot);\r\n            this.l(data.el);\r\n            this.hide();\r\n        },\r\n        onAdsSuccess: (data) => {\r\n            this.l('onAdsSuccess');\r\n            this.l(data.slot);\r\n            this.l(data.el);\r\n            this.l(data.data);\r\n        },\r\n        onAdsClicked: (data) => {\r\n            this.l(data.slot);\r\n            this.l('Going to ' + data.link)\r\n        },\r\n        onScriptError: (data) => {\r\n            this.l('onScriptError');\r\n            this.l(data.slot);\r\n            this.l(data.el);\r\n            this.l(data.error);\r\n            this.events.onError();\r\n        },\r\n        iframeMode: true,\r\n        singleRequest: true,\r\n        preventAutoLoad: true,\r\n        disableCollect: true,\r\n    }\r\n\r\n    constructor(settings, events) {\r\n        if (settings) {\r\n            this.debug = settings?.debug ?? 0\r\n            this.container = settings?.container ?? null;\r\n            this.slotId = settings?.slotId ?? null;\r\n            if (settings.adOptions) {\r\n                this.adOptions = this.mergeOptions(this.adOptions, settings.adOptions);\r\n                this.l(this.adOptions);\r\n            }\r\n            if (settings.adStyles) {\r\n                this.adStyles = this.mergeOptions(this.adStyles, settings.adStyles);\r\n                this.l(this.adStyles);\r\n            }\r\n        }\r\n        window.MRGtag = window.MRGtag || [];\r\n\r\n        this.loadSDK(this.sdkURL);\r\n        this.setEvents(events)\r\n        this.mergeOptions(settings);\r\n    }\r\n\r\n\r\n    drop(onEvent = false) {\r\n        //this. = null;\r\n    }\r\n\r\n    setEvents = (events) => {\r\n        const eventsDefault = {\r\n            onClose: () => { },\r\n            onStop: () => { },\r\n            onError: () => { },\r\n            onImpression: () => { },\r\n            onClick: () => { },\r\n        }\r\n        this.events = { ...eventsDefault, ...events }\r\n    }\r\n\r\n    setImpressionTimeout() {\r\n        this.impressionTimeout = setTimeout(() => {\r\n            this.l('Impression Timeout fired');\r\n            this.events.onImpression();\r\n        }, this.impressionTimeoutDuration);\r\n    }\r\n\r\n    // Settings \r\n\r\n    mergeOptions(o1, o2) {\r\n        this.l('Options are object', this.isObject(o2));\r\n        if (this.isObject(o2))\r\n            o1 = {\r\n                ...o1,\r\n                ...o2\r\n            }\r\n        this.l('Options: ', o1);\r\n        return o1;\r\n    }\r\n    isObject(e) {\r\n        return typeof e === 'object' &&\r\n            !Array.isArray(e) &&\r\n            e !== null;\r\n    }\r\n\r\n    show(container) {\r\n        if (container) this.container = container;\r\n        this.clearContainer();\r\n        this.createAdContainer();\r\n        this.adOptions.element = this.adContainer;\r\n        this.clickTarget.addEventListener(\"click\", this.clickHandler);\r\n        (window.MRGtag = window.MRGtag || []).push(this.adOptions);\r\n    }\r\n\r\n    clearContainer() {\r\n        this.l('Clearing container');\r\n        this.l(this.clickTarget);\r\n        this.l(this.clickHandler);\r\n        if (this.clickTarget && this.clickHandler) {\r\n            this.clickTarget.removeEventListener(\"click\", this.clickHandler);\r\n        }\r\n        this.l(this.container);\r\n        if (this.container) {\r\n            this.container.innerHTML = \"\";\r\n        }\r\n    }\r\n\r\n    createAdContainer() {\r\n        if (this.container) {\r\n            this.adContainer = document.createElement('ins');\r\n            this.container.appendChild(this.adContainer)\r\n            this.adContainer.id = 'ad-test-' + this.slotId;\r\n            this.adContainer.dataset['adClient'] = 'ad-' + this.slotId;\r\n            this.adContainer.dataset['adSlot'] = this.slotId;\r\n            this.adContainer.classList.add('mrg-tag');\r\n            this.setAdContainerStyles();\r\n            this.l('Ad container successfully created', this.adContainer);\r\n        }\r\n        else {\r\n            this.l('Container was not specified')\r\n        }\r\n    }\r\n\r\n    setAdContainerStyles() {\r\n        Object.keys(this.adStyles).forEach((key) => {\r\n            this.adContainer.style[key] = this.adStyles[key];\r\n        });\r\n    }\r\n\r\n    hide() {\r\n        this.clearContainer();\r\n        this.events.onStop();\r\n    }\r\n\r\n    refresh() {\r\n        this.show();\r\n    }\r\n\r\n    loadSDK(url, callback) {\r\n        this.l('LOADING SDK');\r\n        if (typeof this.scriptsLoaded[this.sdkURL] === 'undefined' && !document.querySelector('script[src=\"' + this.sdkURL + '\"]')) {\r\n            this.l('Starting to load SDK');\r\n            this.scriptsLoaded[this.sdkURL] = { isLoaded: false }\r\n            var script = document.createElement('script');\r\n            script.src = url;\r\n            this.scriptsLoaded[this.sdkURL].script = script;\r\n            document.body.appendChild(script);\r\n            this.l('SCRIPT!', script);\r\n            script.onload = () => this.l('SDK LOADED!');\r\n        }\r\n    }\r\n\r\n    click() {\r\n        this.l('Click event fired')\r\n        this.events.onClick();\r\n    }\r\n\r\n    // Debug\r\n\r\n    l(...args) {\r\n        if (this.debug) {\r\n            if (!this.debugGroupOpened)\r\n                console.log(this.debugLabel, this.debugStyles, ...args);\r\n            else\r\n                console.log(...args);\r\n        }\r\n    }\r\n\r\n    lg(label = \"\") {\r\n        if (this.debug && !this.debugGroupOpened) {\r\n            this.debugGroupOpened = true;\r\n            console.groupCollapsed(this.debugLabel, this.debugStyles, label);\r\n        }\r\n    }\r\n\r\n    lge() {\r\n        if (this.debug && this.debugGroupOpened) {\r\n            this.debugGroupOpened = false;\r\n            console.groupEnd();\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://ads/./src/drivers/vk_driver.js?");

/***/ }),

/***/ "./src/drivers/vk_inpage_driver.js":
/*!*****************************************!*\
  !*** ./src/drivers/vk_inpage_driver.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VKInPageDriver)\n/* harmony export */ });\nclass VKInPageDriver {\r\n    debug = 0;\r\n    debugLabel = \"%cMPSU Vk InPage Driver\";\r\n    debugStyles = \"color:white; background-color: #3f8be8; padding: 2px 5px; border-radius: 3px;\";\r\n    debugGroupOpened = false;\r\n\r\n    container = null;\r\n    slotId = null;\r\n    adContainer = null;\r\n\r\n    adStyles = {\r\n        display: 'inline-block',\r\n        width: '640px',\r\n        height: '360px',\r\n    }\r\n\r\n    options = {};\r\n\r\n    impressionTimeoutDuration = 2000;\r\n    impressionTimeout = null;\r\n\r\n    scriptsLoaded = {};\r\n    sdkURL = 'https://ad.mail.ru/static/vk-adman.js';\r\n\r\n    adOptions = {\r\n        onReady: () => { this.l('onReady') },\r\n        onError: (data) => {\r\n            switch (data.error) {\r\n                case 105:\r\n                    this.l(data.error, 'Media chunk error');\r\n                case 311:\r\n                    this.l(data.error, 'No container on the page');\r\n                case 312:\r\n                    this.l(data.error, 'No place in container');\r\n                case 313:\r\n                    this.l(data.error, 'RenderRunner load error');\r\n                case 314:\r\n                    this.l(data.error, 'Message system error');\r\n                case 315:\r\n                    this.l(data.error, 'Unacceptable creative');\r\n                case 316:\r\n                    this.l(data.error, 'Container link error');\r\n                case 321:\r\n                    this.l(data.error, 'Empty ad section');\r\n                case 322:\r\n                    this.l(data.error, 'Visit is not an object');\r\n                case 323:\r\n                    this.l(data.error, 'Server error');\r\n                case 331:\r\n                    this.l(data.error, 'Config error');\r\n                case 332:\r\n                    this.l(data.error, 'Slot is not specified');\r\n                case 333:\r\n                    this.l(data.error, 'Container is not specified');\r\n                case 341:\r\n                    this.l(data.error, 'Wrong inline banner (base64)');\r\n                case 342:\r\n                    this.l(data.error, 'Wrong inline config. Check the \"src\" attribute');\r\n                case 351:\r\n                    this.l(data.error, 'No media in section');\r\n                case 352:\r\n                    this.l(data.error, 'Invalid JSON server response');\r\n                case 353:\r\n                    this.l(data.error, 'Config is not an object');\r\n                case 361:\r\n                    this.l(data.error, 'Video element error');\r\n                case 362:\r\n                    this.l(data.error, 'Old browser (IntersectionObserver);)');\r\n                case 5001:\r\n                    this.l(data.error, 'Common error');\r\n                case 5002:\r\n                    this.l(data.error, 'Already initialized');\r\n                case 5003:\r\n                    this.l(data.error, 'Not initialized');\r\n                case 5004:\r\n                    this.l(data.error, 'Not in play status');\r\n                case 5005:\r\n                    this.l(data.error, 'Not in pause status');\r\n                case 5006:\r\n                    this.l(data.error, 'The ad is already started');\r\n                case 5007:\r\n                    this.l(data.error, 'Destroyed');\r\n                case 5008:\r\n                    this.l(data.error, 'Forbidden in stream mode (playMode=\"stream\")');\r\n                case 1100:\r\n                    this.l(data.error, 'Empty ad response');\r\n                default:\r\n                    this.l(data.error, 'Unknown error');\r\n            }\r\n            if (data.error === 1100) {\r\n                this.events.onStop();\r\n            }\r\n            else {\r\n                this.events.onError();\r\n            }\r\n\r\n        },\r\n        onStarted: () => {\r\n            this.l('onStarted');\r\n            this.setImpressionTimeout();\r\n        },\r\n        onPaused: () => { this.l('onPaused') },\r\n        onPlayed: () => { this.l('onPlayed') },\r\n        onCompleted: () => { this.l('onCompleted') },\r\n        onClosed: () => { this.l('onClosed'); this.events.onClose(); },\r\n        onSkipped: () => { this.l('onSkipped') },\r\n        onClicked: () => {\r\n            this.l('onClicked')\r\n            this.events.onClick();\r\n        },\r\n        adMidrollPoint: () => { this.l('adMidrollPoint') },\r\n        onTimeRemained: () => { this.l('onTimeRemained') },\r\n        onDurationChanged: () => { this.l('onDurationChanged') },\r\n        onVPAIDStarted: () => { this.l('onVPAIDStarted') }\r\n    }\r\n\r\n    f = function () {\r\n        this.push(Array.prototype.slice.apply(arguments));\r\n    }\r\n\r\n    constructor(settings, events) {\r\n        if (settings) {\r\n            this.debug = settings?.debug ?? 0\r\n            this.container = settings?.container ?? null;\r\n            this.slotId = settings?.slotId ?? null;\r\n            if (settings.adOptions) {\r\n                this.adOptions = this.mergeOptions(this.adOptions, settings.adOptions);\r\n                this.l(this.adOptions);\r\n            }\r\n            if (settings.adStyles) {\r\n                this.adStyles = this.mergeOptions(this.adStyles, settings.adStyles);\r\n                this.l(this.adStyles);\r\n            }\r\n        }\r\n\r\n        window.AdManPlayer = this.f.bind(window._AdManPlayerInit = []);\r\n        window.AdManSDK = this.f.bind(window._AdManSDKInit = []);\r\n\r\n        this.loadSDK(this.sdkURL);\r\n        this.setEvents(events)\r\n        this.mergeOptions(settings);\r\n    }\r\n\r\n\r\n    drop(onEvent = false) {\r\n        this.clearContainer();\r\n    }\r\n\r\n    setEvents = (events) => {\r\n        const eventsDefault = {\r\n            onClose: () => { },\r\n            onStop: () => { },\r\n            onError: () => { },\r\n            onImpression: () => { },\r\n            onClick: () => { },\r\n        }\r\n        this.events = { ...eventsDefault, ...events }\r\n    }\r\n\r\n    setImpressionTimeout() {\r\n        this.impressionTimeout = setTimeout(() => {\r\n            this.l('Impression Timeout fired');\r\n            this.events.onImpression();\r\n        }, this.impressionTimeoutDuration);\r\n    }\r\n\r\n    // Settings \r\n\r\n    mergeOptions(o1, o2) {\r\n        this.l('Options are object', this.isObject(o2));\r\n        if (this.isObject(o2))\r\n            o1 = {\r\n                ...o1,\r\n                ...o2\r\n            }\r\n        this.l('Options: ', o1);\r\n        return o1;\r\n    }\r\n    isObject(e) {\r\n        return typeof e === 'object' &&\r\n            !Array.isArray(e) &&\r\n            e !== null;\r\n    }\r\n\r\n    show(container) {\r\n        if (container) this.container = container;\r\n        this.clearContainer();\r\n        this.createAdContainer();\r\n        this.l(this.adContainer.id);\r\n        this.l('Ad options:', this.adOptions);\r\n        this.l('slotId', this.slotId);\r\n\r\n        window.AdManPlayer({\r\n            container: \"#ad-\" + this.slotId,\r\n            slot: this.slotId,\r\n            ...this.adOptions\r\n        });\r\n    }\r\n\r\n    clearContainer() {\r\n        this.l(this.container);\r\n        if (this.container) {\r\n            this.container.innerHTML = \"\";\r\n        }\r\n    }\r\n\r\n    createAdContainer() {\r\n        if (this.container) {\r\n            this.adContainer = document.createElement('div');\r\n            this.adContainer.id = \"ad-\" + this.slotId;\r\n            this.setAdContainerStyles();\r\n            this.container.appendChild(this.adContainer);\r\n            this.l('Ad container successfully created', this.adContainer);\r\n        }\r\n        else {\r\n            this.l('Container was not specified')\r\n        }\r\n    }\r\n\r\n    setAdContainerStyles() {\r\n        Object.keys(this.adStyles).forEach((key) => {\r\n            this.adContainer.style[key] = this.adStyles[key];\r\n        });\r\n    }\r\n\r\n    hide() {\r\n        this.clearContainer();\r\n        this.events.onStop();\r\n    }\r\n\r\n    refresh() {\r\n        this.show();\r\n    }\r\n\r\n    loadSDK(url, callback) {\r\n        this.l('LOADING SDK');\r\n        if (typeof this.scriptsLoaded[this.sdkURL] === 'undefined' && !document.querySelector('script[src=\"' + this.sdkURL + '\"]')) {\r\n            this.l('Starting to load SDK');\r\n            this.scriptsLoaded[this.sdkURL] = { isLoaded: false }\r\n            var script = document.createElement('script');\r\n            script.src = url;\r\n            this.scriptsLoaded[this.sdkURL].script = script;\r\n            document.body.appendChild(script);\r\n            this.l('SCRIPT!', script);\r\n            script.onload = () => this.l('SDK LOADED!');\r\n        }\r\n    }\r\n\r\n    // Debug\r\n\r\n    l(...args) {\r\n        if (this.debug) {\r\n            if (!this.debugGroupOpened)\r\n                console.log(this.debugLabel, this.debugStyles, ...args);\r\n            else\r\n                console.log(...args);\r\n        }\r\n    }\r\n\r\n    lg(label = \"\") {\r\n        if (this.debug && !this.debugGroupOpened) {\r\n            this.debugGroupOpened = true;\r\n            console.groupCollapsed(this.debugLabel, this.debugStyles, label);\r\n        }\r\n    }\r\n\r\n    lge() {\r\n        if (this.debug && this.debugGroupOpened) {\r\n            this.debugGroupOpened = false;\r\n            console.groupEnd();\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://ads/./src/drivers/vk_inpage_driver.js?");

/***/ }),

/***/ "./src/drivers/vpaid_driver.js":
/*!*************************************!*\
  !*** ./src/drivers/vpaid_driver.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VPAIDDriver)\n/* harmony export */ });\nclass VPAIDDriver {\r\n\r\n  debug = 0;\r\n  debugLabel = \"%cMPSU Player\";\r\n  debugStyles = \"color:white; background-color: #3f8be8; padding: 2px 5px; border-radius: 3px;\";\r\n  debugGroupOpened = false;\r\n\r\n  hash = null;\r\n  widgetId = null;\r\n  loop = 0;\r\n  disableControls = 0;\r\n\r\n  logoSvg = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 757.84 120\"> <defs> <style>.cls-1{fill:#ff6d00;}.cls-2{fill:#fff;}</style> </defs> <title>Лого в кривых</title> <g id=\"Слой_2\" data-name=\"Слой 2\"> <g id=\"Слой_1-2\" data-name=\"Слой 1\"> <path class=\"cls-1\" d=\"M451.84,0H726.4a31.44,31.44,0,0,1,31.44,31.44V88.56A31.44,31.44,0,0,1,726.4,120H483.28a31.44,31.44,0,0,1-31.44-31.44V0A0,0,0,0,1,451.84,0Z\"/> <path class=\"cls-2\" d=\"M62.95,96.56l-.1-41.5L42.49,89.25H35.28L15,55.95V96.56H0V27.39H13.24l25.89,43,25.49-43H77.77L78,96.56Z\"/> <path class=\"cls-2\" d=\"M139.92,81.74H107.8l-6.13,14.82H85.27L116.1,27.39h15.81l30.93,69.17H146Zm-5-12.15-11-26.48-11,26.48Z\"/> <path class=\"cls-2\" d=\"M214.12,96.56,200.78,77.29H186.06V96.56h-16V27.39H200c18.48,0,30,9.58,30,25.1,0,10.38-5.24,18-14.23,21.84l15.51,22.23Zm-15-56.13h-13V64.54h13c9.78,0,14.72-4.54,14.72-12.06S208.89,40.43,199.1,40.43Z\"/> <path class=\"cls-2\" d=\"M267.88,69.38l-9.29,9.68V96.56H242.68V27.39h15.91V59.7l30.63-32.31H307L278.35,58.22l30.34,38.34H290Z\"/> <path class=\"cls-2\" d=\"M369.35,83.71V96.56H315.8V27.39h52.27V40.23H331.71v15h32.12V67.7H331.71v16Z\"/> <path class=\"cls-2\" d=\"M396.43,40.43H374.29v-13h60.28v13H412.43V96.56h-16Z\"/> <path class=\"cls-2\" d=\"M489.88,65.52V88.15a4.05,4.05,0,0,1-1,3.11,6,6,0,0,1-6.2,0,4.07,4.07,0,0,1-.95-3.06V29.65q0-4,4.05-4H507q9.19,0,14.33,5.19t5.14,14.48q0,9.29-4.73,14.72t-14.29,5.43Zm0-31.92v24H508.1a9.84,9.84,0,0,0,4.82-1.09,8.83,8.83,0,0,0,3.15-2.87,12.59,12.59,0,0,0,1.72-4,17.91,17.91,0,0,0,.54-4.35A15.36,15.36,0,0,0,517.5,40a10.19,10.19,0,0,0-2.27-3.66,8.51,8.51,0,0,0-3.3-2.08A12.05,12.05,0,0,0,508,33.6Z\"/> <path class=\"cls-2\" d=\"M540,91.61q-4.15,0-4.15-4.05V29.16q0-4,4.15-4a4.28,4.28,0,0,1,3,.89,4.11,4.11,0,0,1,.94,3.06V83.7h28.85q3.75,0,3.75,3.85,0,4.05-3.75,4.05Z\"/> <path class=\"cls-2\" d=\"M617.45,76.59H591.85l-4.35,12.85A3.41,3.41,0,0,1,584,92a5.59,5.59,0,0,1-1.78-.3,3.93,3.93,0,0,1-2.17-1.28,3.28,3.28,0,0,1-.69-2.08,4.22,4.22,0,0,1,.2-1.48L599,29.45a8.11,8.11,0,0,1,1.53-2.87,3.74,3.74,0,0,1,2.82-.89h2.87a3.75,3.75,0,0,1,2.82.89,8.16,8.16,0,0,1,1.53,2.87L629.9,86.86a4.23,4.23,0,0,1,.3,1.48q0,2.27-2.57,3.26a7.59,7.59,0,0,1-2,.3,3.7,3.7,0,0,1-3.75-2.47Zm-22.83-7.9h20.26L604.8,37.36h-.2Z\"/> <path class=\"cls-2\" d=\"M654.1,91.61a19.3,19.3,0,0,1-6.82-1.19,14.85,14.85,0,0,1-5.52-3.61,17,17,0,0,1-3.7-6.13A25.21,25.21,0,0,1,636.71,72V45.36a23.65,23.65,0,0,1,1.45-8.65,17.36,17.36,0,0,1,3.9-6.13,16.54,16.54,0,0,1,5.57-3.66,17.66,17.66,0,0,1,6.57-1.24h20.65q3.75,0,3.75,4t-3.75,4H655a9.29,9.29,0,0,0-7.51,3.16,12.44,12.44,0,0,0-2.67,8.3V72.34a12.54,12.54,0,0,0,2.57,8.25,8.94,8.94,0,0,0,7.31,3.11h20.16q3.75,0,3.75,3.85,0,4.05-3.75,4.05Z\"/> <path class=\"cls-2\" d=\"M691.36,91.61q-4.15,0-4.15-4.05V29.65q0-4,4.15-4h32.9q3.75,0,3.75,4t-3.75,4h-29V52.67H720q3.56,0,3.56,4T720,60.58h-24.7V83.7h29q3.75,0,3.75,3.85,0,4.05-3.75,4.05Z\"/> </g> </g> <script xmlns=\"\" id=\"professor prebid injected bundle\"/></svg>`;\r\n  logoLink = 'https://market-place.su';\r\n  disableLogo = 1;\r\n\r\n  adMuted = true;\r\n  soundBtn = null;\r\n  disableSoundBtn = 0;\r\n\r\n  playBtn = null;\r\n  disablePlayBtn = 1;\r\n\r\n  closeBtn = null;\r\n  disableCloseBtn = 1;\r\n\r\n  stylesElement = null;\r\n  controlsStyles = `\r\n  .mpsu-logo {\r\n    position:absolute;\r\n    top: 0px;\r\n    right: 0px; \r\n    width: 110px;\r\n    height: 25px;\r\n    background-color: rgba(0,0,0,.8);\r\n    padding: 5px 15px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n  }\r\n\r\n  .mpsu-player-controls {\r\n    position: absolute; \r\n    left: 10px; \r\n    top: 10px;\r\n  }\r\n\r\n  .mpsu-control {\r\n    width: 26px; \r\n    height: 26px; \r\n    background-color: rgba(0,0,0,.8); \r\n    color: white;\r\n    border-radius: 50%;\r\n    float: left;\r\n    cursor: pointer;\r\n    margin-left: 10px\r\n  }\r\n\r\n  .mpsu-control:first-child {\r\n    margin-left: 0;\r\n  }\r\n\r\n  .mpsu-control:hover {\r\n    background-color: rgba(0,0,0,1);\r\n  }\r\n\r\n  .mpsu-close-button  {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: white;\r\n  }\r\n\r\n  .mpsu-sound-button svg {\r\n    margin-top: 5px;\r\n    margin-left: 2px;\r\n  }\r\n  \r\n  .mpsu-sound-button .muted {\r\n    display: none;\r\n  }\r\n\r\n  .mpsu-sound-button.muted .muted {\r\n    display: inline-block;\r\n  }\r\n\r\n  .mpsu-sound-button.muted .unmuted {\r\n    display: none;\r\n  }\r\n  \r\n  .mpsu-play-button .pause {\r\n    display: none;\r\n    margin-top: 5px;\r\n    margin-left: 8px;\r\n  }\r\n\r\n  .mpsu-play-button .play {\r\n    margin-top: 5px;\r\n    margin-left: 8px;\r\n  }\r\n\r\n  .mpsu-play-button.playing .pause {\r\n    display: inline-block;\r\n  }\r\n\r\n  .mpsu-play-button.playing .play {\r\n    display: none;\r\n  }\r\n  `;\r\n\r\n  playerContainer = null;\r\n  scriptsLoaded = {};\r\n  que = [];\r\n\r\n  timeout = null;\r\n  timeoutDuration = 2000\r\n\r\n  ima = null;\r\n\r\n  options = { // Default options\r\n    video: {\r\n      style: 'width: 100%; height: 100%;'\r\n    }\r\n  };\r\n\r\n  sdkURL = 'https://imasdk.googleapis.com/js/sdkloader/ima3.js';\r\n  url = 'https://v1.mpsuadv.ru/bh_v2/[hash]?hash=mpsu';\r\n  videoUrl = 'video.mp4';\r\n\r\n  constructor(settings, events) {\r\n    this.dropAdLoader();\r\n    this.hash = settings.hash;\r\n    this.widgetId = settings.widgetId;\r\n\r\n    this.setOption(settings, 'debug');\r\n    this.setOption(settings, 'loop');\r\n    this.setOption(settings, 'disableControls');\r\n    this.setOption(settings, 'disableLogo');\r\n    this.setOption(settings, 'disableCloseBtn');\r\n    this.setOption(settings, 'disablePlayBtn');\r\n    this.setOption(settings, 'disableSoundBtn');\r\n\r\n    this.url = this.url.replace('[hash]', this.hash);\r\n    this.l('URL: ', this.url);\r\n    this.url = 'https://statika.mpsuadv.ru/test/test.xml'; // temporary url, remove on production\r\n    if (settings.videoUrl) this.videoUrl = settings.videoUrl;\r\n    this.playerContainer = settings.container;\r\n    this.clearContainer();\r\n\r\n    this.loadSDK(this.sdkURL, () => { this.init(); })\r\n    this.setEvents(events)\r\n\r\n    this.mergeOptions(settings);\r\n    this.l(\"Settings: \", this.options);\r\n  }\r\n\r\n  setOption(s, o) {\r\n    if (typeof s[o] !== 'undefined') {\r\n      this[o] = s[o];\r\n    }\r\n  }\r\n\r\n  dropAdLoader(onEvent = false) {\r\n    this.l('Dropping Ad Loader');\r\n    if (this.adsManager) {\r\n      this.adsManager.destroy();\r\n    }\r\n    this.adsLoader = null;\r\n    this.adDisplayContainer = null;\r\n    this.adsManager = null;\r\n    this.adsLoaded = false;\r\n    this.adsRenderingSettings = null;\r\n    this.videoElement = null;\r\n    this.videoContainer = null;\r\n    this.adContainer = null;\r\n    this.videoStatus = null;\r\n    this.status = onEvent ? 'dropped' : null;\r\n    this.isRunning = false;\r\n    clearTimeout(this.timeout);\r\n  }\r\n\r\n  setEvents = (events) => {\r\n    const eventsDefault = {\r\n      onClose: () => { },\r\n      onStop: () => { },\r\n      onError: () => { },\r\n      onImpression: () => { },\r\n      onClick: () => { },\r\n    }\r\n    this.events = { ...eventsDefault, ...events }\r\n  }\r\n\r\n  addControls() {\r\n    this.l('Adding controls', !this.disableControls)\r\n    if (!this.disableControls) {\r\n      if (!this.controlsElement) {\r\n        this.controlsElement = document.createElement('div');\r\n        this.controlsElement.classList.add('mpsu-player-controls');\r\n        this.playerContainer.appendChild(this.controlsElement);\r\n      }\r\n\r\n      this.l('Creating close button')\r\n      if (!this.closeBtn && !this.disableCloseBtn) {\r\n        this.closeBtn = document.createElement('div');\r\n        this.closeBtn.classList.add('mpsu-control');\r\n        this.closeBtn.classList.add('mpsu-close-button');\r\n\r\n        let closeIconSvg = '<svg fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 384 512\"><path d=\"M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z\"/></svg>';\r\n\r\n        this.closeBtn.insertAdjacentHTML('beforeend', closeIconSvg);\r\n\r\n        this.controlsElement.appendChild(this.closeBtn);\r\n\r\n        this.addCloseButtonEvents();\r\n      }\r\n      else {\r\n        this.l('Close button already exists');\r\n      }\r\n\r\n      this.l('Creating sound button')\r\n      if (!this.soundBtn && !this.disableSoundBtn) {\r\n        this.soundBtn = document.createElement('div');\r\n        this.soundBtn.classList.add('mpsu-control');\r\n        this.soundBtn.classList.add('mpsu-sound-button');\r\n        this.soundBtn.classList.add('muted');\r\n\r\n        let mutedIconSvg = '<svg class=\"muted\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 576 512\"><path d=\"M301.1 34.8C312.6 40 320 51.4 320 64V448c0 12.6-7.4 24-18.9 29.2s-25 3.1-34.4-5.3L131.8 352H64c-35.3 0-64-28.7-64-64V224c0-35.3 28.7-64 64-64h67.8L266.7 40.1c9.4-8.4 22.9-10.4 34.4-5.3zM425 167l55 55 55-55c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-55 55 55 55c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-55-55-55 55c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l55-55-55-55c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z\"/></svg>';\r\n        let unmutedIconSvg = '<svg class=\"unmuted\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 640 512\"><path d=\"M533.6 32.5C598.5 85.3 640 165.8 640 256s-41.5 170.8-106.4 223.5c-10.3 8.4-25.4 6.8-33.8-3.5s-6.8-25.4 3.5-33.8C557.5 398.2 592 331.2 592 256s-34.5-142.2-88.7-186.3c-10.3-8.4-11.8-23.5-3.5-33.8s23.5-11.8 33.8-3.5zM473.1 107c43.2 35.2 70.9 88.9 70.9 149s-27.7 113.8-70.9 149c-10.3 8.4-25.4 6.8-33.8-3.5s-6.8-25.4 3.5-33.8C475.3 341.3 496 301.1 496 256s-20.7-85.3-53.2-111.8c-10.3-8.4-11.8-23.5-3.5-33.8s23.5-11.8 33.8-3.5zm-60.5 74.5C434.1 199.1 448 225.9 448 256s-13.9 56.9-35.4 74.5c-10.3 8.4-25.4 6.8-33.8-3.5s-6.8-25.4 3.5-33.8C393.1 284.4 400 271 400 256s-6.9-28.4-17.7-37.3c-10.3-8.4-11.8-23.5-3.5-33.8s23.5-11.8 33.8-3.5zM301.1 34.8C312.6 40 320 51.4 320 64V448c0 12.6-7.4 24-18.9 29.2s-25 3.1-34.4-5.3L131.8 352H64c-35.3 0-64-28.7-64-64V224c0-35.3 28.7-64 64-64h67.8L266.7 40.1c9.4-8.4 22.9-10.4 34.4-5.3z\"/></svg>';\r\n\r\n        this.soundBtn.insertAdjacentHTML('beforeend', mutedIconSvg);\r\n        this.soundBtn.insertAdjacentHTML('beforeend', unmutedIconSvg);\r\n\r\n        this.controlsElement.appendChild(this.soundBtn);\r\n\r\n        this.addSoundButtonEvents();\r\n      }\r\n      else {\r\n        this.l('Sound button already exists')\r\n      }\r\n\r\n      this.l('Creating play button');\r\n      if (!this.playBtn && !this.disablePlayBtn) {\r\n        this.playBtn = document.createElement('div');\r\n        this.playBtn.classList.add('mpsu-control');\r\n        this.playBtn.classList.add('mpsu-play-button');\r\n        this.playBtn.classList.add('playing');\r\n\r\n        let playIconSvg = '<svg class=\"play\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 384 512\"><path d=\"M73 39c-14.8-9.1-33.4-9.4-48.5-.9S0 62.6 0 80V432c0 17.4 9.4 33.4 24.5 41.9s33.7 8.1 48.5-.9L361 297c14.3-8.7 23-24.2 23-41s-8.7-32.2-23-41L73 39z\"/></svg>';\r\n        let pauseIconSvg = '<svg class=\"pause\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 320 512\"><path d=\"M48 64C21.5 64 0 85.5 0 112V400c0 26.5 21.5 48 48 48H80c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H48zm192 0c-26.5 0-48 21.5-48 48V400c0 26.5 21.5 48 48 48h32c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H240z\"/></svg>';\r\n\r\n        this.playBtn.insertAdjacentHTML('beforeend', playIconSvg);\r\n        this.playBtn.insertAdjacentHTML('beforeend', pauseIconSvg);\r\n\r\n        this.controlsElement.appendChild(this.playBtn);\r\n\r\n        this.addPlayButtonEvents();\r\n      }\r\n      else {\r\n        this.l('Play button already exists');\r\n      }\r\n    }\r\n    else {\r\n      this.l('Controls option disabled')\r\n    }\r\n  }\r\n\r\n  addControlsStyles() {\r\n    this.l('Adding controls styles', !this.disableControls)\r\n    this.l(!this.stylesElement ? 'Adding styles element' : 'Styles element already exists')\r\n    if (!this.stylesElement) {\r\n      this.stylesElement = document.createElement('style');\r\n      this.stylesElement.insertAdjacentHTML('beforeend', this.controlsStyles);\r\n      this.l(this.playerContainer);\r\n      this.playerContainer.appendChild(this.stylesElement);\r\n    }\r\n  }\r\n\r\n  addLogo() {\r\n    if (!this.logo && !this.disableLogo) {\r\n      this.logo = document.createElement('a');\r\n      this.logo.href = this.logoLink;\r\n      this.logo.insertAdjacentHTML('beforeend', this.logoSvg);\r\n      this.logo.classList.add('mpsu-logo');\r\n      this.playerContainer.appendChild(this.logo);\r\n    }\r\n  }\r\n\r\n  // Actions\r\n\r\n  show(container) {\r\n\r\n    this.l('Showing ads');\r\n    this.l('Status:', this.status);\r\n\r\n    if (container && container !== this.playerContainer) {\r\n      this.clearContainer();\r\n      this.l('Setting new player container:', container);\r\n      this.playerContainer = container;\r\n      this.clearContainer();\r\n      this.handleElements();\r\n    }\r\n\r\n    if (window.google?.ima && !this.adsLoader && this.videoElement && this.adContainer) {\r\n      this.initAdsLoader();\r\n    }\r\n\r\n    if (this.status === 'dropped') {\r\n      this.reInit();\r\n    }\r\n\r\n    if (!this.isRunning) {\r\n      this.isRunning = true;\r\n      this.l('isRunning', this.isRunning);\r\n      this.que.push(this.loadAds.bind(this))\r\n      if (this.adsManager)\r\n        this.processQueue();\r\n    }\r\n\r\n    this.l('!this.disableControls', !this.disableControls)\r\n    if (!this.disableControls) {\r\n      this.addControlsStyles();\r\n      this.addControls();\r\n      this.addLogo();\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    this.isRunning = false;\r\n    this.events.onStop();\r\n    this.dropAdLoader(true);\r\n    this.clearContainer();\r\n  }\r\n\r\n  refresh() {\r\n    this.l('Refreshing player');\r\n    if (this.status === 'dropped') {\r\n      this.reInit();\r\n      this.show();\r\n    }\r\n    else if (this.status !== 'dropped' && this.adsLoader) {\r\n      this.playNextAd()\r\n    }\r\n  }\r\n\r\n  resume() {\r\n    this.adsManager?.resume()\r\n  }\r\n\r\n  pause() {\r\n    this.adsManager?.pause()\r\n  }\r\n\r\n  playNextAd() {\r\n    this.l('Playing next Ad')\r\n    this.adsManager.destroy();\r\n    this.adsLoader.contentComplete();\r\n    this.que.push(this.loadAds.bind(this))\r\n    this.adsLoaded = false;\r\n    this.adsLoader.requestAds(this.adsRequest);\r\n  }\r\n\r\n  mute() {\r\n    this.adMuted = true;\r\n    this.adsManager?.setVolume(0);\r\n  }\r\n\r\n  unmute() {\r\n    this.adMuted = false;\r\n    this.adsManager?.setVolume(1);\r\n  }\r\n\r\n  playVideo() {\r\n    if (this.videoStatus && this.videoStatus !== 'playing') {\r\n      this.l('Video play fires');\r\n      this.l('Video status: ', this.videoStatus);\r\n      if (this.videoElement.play())\r\n        this.videoStatus = 'playing';\r\n      return this;\r\n    }\r\n    if (!this.status) {\r\n      console.warn(\"Please init player first\");\r\n    }\r\n    if (this.videoStatus === 'playing') {\r\n      this.l(\"Already playing\")\r\n    }\r\n  }\r\n\r\n  stopVideo() {\r\n    if (this.videoStatus === 'playing') {\r\n      this.videoElement.pause();\r\n      this.videoElement.currentTime = 0;\r\n      this.videoStatus = 'stopped';\r\n      return this;\r\n    }\r\n    console.warn(\"Please start the video first\");\r\n  }\r\n\r\n  pauseVideo() {\r\n    if (this.videoStatus === 'playing') {\r\n      this.videoElement.pause();\r\n      this.videoStatus = 'paused';\r\n      return this;\r\n    }\r\n    console.warn(\"Please start the video first\");\r\n  }\r\n\r\n  // Queue \r\n\r\n  processQueue() {\r\n    this.l('Processing queue');\r\n    if (this.que.length && window.google?.ima) {\r\n      this.l('Have ' + this.que.length + ' job(s)');\r\n      this.l('Queue', this.que)\r\n      this.que.forEach((task, index) => {\r\n        this.l('[' + index + ']', task);\r\n        task();\r\n        delete this.que[index];\r\n      });\r\n    }\r\n    else {\r\n      this.l('Queue is empty');\r\n    }\r\n  }\r\n\r\n  // Initialization\r\n\r\n  init() {\r\n    this.l(\"Initializing IMA\");\r\n\r\n    this.setWindowResizeEvent();\r\n\r\n    if (this.playerContainer) {\r\n      this.handleElements();\r\n    }\r\n\r\n    this.l('window.google', window.google);\r\n    this.initAdsLoader();\r\n  }\r\n\r\n  initAdsLoader() {\r\n    if (this.adContainer && this.videoElement) {\r\n      this.l('Initializing Ads Loader');\r\n      this.adDisplayContainer = new window.google.ima.AdDisplayContainer(this.adContainer, this.videoElement);\r\n      // this.adContainer.addEventListener('click', this.adContainerClick.bind(this));\r\n      this.adsLoader = new window.google.ima.AdsLoader(this.adDisplayContainer);\r\n      this.adsLoader.addEventListener(\r\n        window.google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED,\r\n        (e) => { this.onAdsManagerLoaded(e) },\r\n        false);\r\n      this.adsLoader.addEventListener(\r\n        window.google.ima.AdErrorEvent.Type.AD_ERROR,\r\n        (e) => { this.onAdError(e) },\r\n        false);\r\n\r\n      this.adsRequest = new window.google.ima.AdsRequest();\r\n      this.adsRequest.adTagUrl = this.url;\r\n\r\n      this.adsRequest.linearAdSlotWidth = this.videoElement.clientWidth;\r\n      this.adsRequest.linearAdSlotHeight = this.videoElement.clientHeight;\r\n      this.adsRequest.nonLinearAdSlotWidth = this.videoElement.clientWidth;\r\n      this.adsRequest.nonLinearAdSlotHeight = this.videoElement.clientHeight / 3;\r\n\r\n      this.adsRequest.setContinuousPlayback(true);\r\n      this.adsRequest.setAdWillAutoPlay(true);\r\n\r\n      this.adsLoader.requestAds(this.adsRequest);\r\n\r\n      this.status = \"initiated\";\r\n      this.l('Status:', this.status);\r\n    }\r\n    else {\r\n      this.l('Can\\'t initialize Ads Loader, no proper video element or ad container. Ads Loader will be initialized on show()');\r\n    }\r\n  }\r\n\r\n  reInit() {\r\n    this.l('Reinitializing player');\r\n    this.dropAdLoader(true);\r\n    this.clearContainer();\r\n    this.init();\r\n  }\r\n\r\n  clearContainer() {\r\n    this.l('Clearing container');\r\n    if (this.playerContainer)\r\n      this.playerContainer.innerHTML = \"\";\r\n  }\r\n\r\n  loadSDK(url, callback) {\r\n    this.l('LOADING SDK');\r\n    if (window.google?.ima && callback) {\r\n      this.l('IMA loaded & have a callback');\r\n      callback();\r\n    }\r\n    else if (typeof this.scriptsLoaded[this.sdkURL] === 'undefined' && !document.querySelector('script[src=\"' + this.sdkURL + '\"]')) {\r\n      this.l('Starting to load SDK');\r\n      this.scriptsLoaded[this.sdkURL] = { isLoaded: false }\r\n      var script = document.createElement('script');\r\n      script.src = url;\r\n      this.scriptsLoaded[this.sdkURL].script = script;\r\n      if (callback) script.onload = () => {\r\n        this.l('IMA SDK just loaded');\r\n        this.scriptsLoaded[this.sdkURL].loaded = true;\r\n\r\n        callback();\r\n      };\r\n      document.body.appendChild(script);\r\n      this.l('SCRIPT!', script);\r\n    }\r\n  }\r\n\r\n  handleElements() {\r\n    this.l('Handling Elements');\r\n    if (!this.videoStatus) {\r\n      this.l(\"Creating Video Element\");\r\n      this.videoElement = document.createElement('video');\r\n      this.videoElement.setAttribute(\"playsinline\", \"\")\r\n      this.videoElement.setAttribute(\"autoplay\", \"\")\r\n      this.videoElement.setAttribute(\"style\", this.options.video.style);\r\n      this.videoElement.style.maxWidth = \"100%\";\r\n      this.videoElement.style.pointerEvents = \"none\";\r\n      this.videoElement.muted = true;\r\n      this.videoElement.controls = false;\r\n      this.l(\"Video Element\", this.videoElement);\r\n\r\n      this.l(\"Creating Video Container\");\r\n      this.videoContainer = document.createElement('div');\r\n      this.videoContainer.classList.add('mpsu-player-container');\r\n      this.videoContainer.style.position = \"relative\";\r\n      this.videoContainer.style.width = this.options.video.width + \"px\";\r\n      this.videoContainer.style.height = this.options.video.height + \"px\";\r\n      this.videoElement.before(this.videoContainer);\r\n      this.videoContainer.appendChild(this.videoElement);\r\n      this.l(\"Video Container\", this.videoContainer);\r\n\r\n      this.l(\"Creating Ad Container\");\r\n      this.adContainer = document.createElement('div');\r\n      this.adContainer.classList.add('mpsu-ad-container');\r\n      this.adContainer.style.position = \"absolute\";\r\n      this.adContainer.style.top = 0;\r\n      this.adContainer.style.left = 0;\r\n      this.adContainer.style.width = \"100%\";\r\n      this.adContainer.style.height = \"100%\";\r\n      this.videoContainer.appendChild(this.adContainer);\r\n      this.l(\"Ad Container\", this.adContainer);\r\n\r\n      this.clearContainer();\r\n      this.playerContainer.appendChild(this.videoContainer);\r\n\r\n      this.addVideoEvents();\r\n\r\n      this.videoStatus = \"initiated\";\r\n      this.l('Video status:', this.videoStatus);\r\n    }\r\n    else {\r\n      this.l('Video elements already initiated');\r\n    }\r\n  }\r\n\r\n  loadAds(event) {\r\n    this.l(\"Loading ads\");\r\n    if (this.adsLoaded) {\r\n      this.l(\"Ads already loaded\");\r\n      return;\r\n    }\r\n    this.adsLoaded = true;\r\n    this.videoElement.load();\r\n    this.l(\"Video element loaded\");\r\n    this.adDisplayContainer.initialize();\r\n    this.l(\"Display Container initialized\");\r\n    var width = this.videoElement.clientWidth;\r\n    var height = this.videoElement.clientHeight;\r\n    try {\r\n      this.l(\"Trying to init ads manager\");\r\n      this.l(\"Ads Manager: \", this.adsManager);\r\n      this.l(\"window.google.ima\", window.google.ima);\r\n      this.adsManager.init(width, height, window.google.ima.ViewMode.NORMAL);\r\n      this.l(\"Starting ads manager\");\r\n      this.adsManager.start();\r\n      this.l(\"Ads Manager Started\");\r\n    } catch (adError) {\r\n      // Play the video without ads, if an error occurs\r\n      this.l(\"AdsManager could not be started\", adError);\r\n      this.hide();\r\n      this.events.onError()\r\n    }\r\n  }\r\n\r\n  // Settings \r\n\r\n  mergeOptions(o) {\r\n    this.l('Options are object', this.isObject(o));\r\n    if (this.isObject(o))\r\n      this.options = {\r\n        ...this.options,\r\n        ...o\r\n      }\r\n  }\r\n  isObject(e) {\r\n    return typeof e === 'object' &&\r\n      !Array.isArray(e) &&\r\n      e !== null;\r\n  }\r\n\r\n  // Events\r\n\r\n  addVideoEvents() {\r\n    this.l('Adding video events');\r\n    this.videoElement.addEventListener(\"ended\", () => {\r\n      this.l(\"ended event triggered\");\r\n      if (this.adsLoader) {\r\n        this.playNextAd();\r\n      }\r\n    });\r\n    this.videoElement.addEventListener(\"error\", () => {\r\n      this.l(\"error event triggered\");\r\n    });\r\n    this.videoElement.addEventListener(\"pause\", () => {\r\n      this.l(\"pause event triggered\");\r\n    });\r\n    this.videoElement.addEventListener(\"play\", () => {\r\n      this.l(\"play event triggered\");\r\n    });\r\n  }\r\n\r\n  onAdsManagerLoaded(adsManagerLoadedEvent) {\r\n    this.l(\"Ads Manager Loaded\");\r\n    this.adsRenderingSettings = new window.google.ima.AdsRenderingSettings()\r\n    this.adsRenderingSettings.uiElements = [\r\n      window.google.ima.UiElements.AD_ATTRIBUTION,\r\n      window.google.ima.UiElements.COUNTDOWN,\r\n    ]\r\n    this.l('IMA', window.google.ima);\r\n    this.adsManager = adsManagerLoadedEvent.getAdsManager(this.videoElement, this.adsRenderingSettings);\r\n\r\n    this.adsManager.setVolume(0);\r\n    this.adMuted = true;\r\n\r\n    this.l('Error types: ', window.google.ima.AdErrorEvent.Type);\r\n    this.l('Event types: ', window.google.ima.AdEvent.Type);\r\n\r\n    this.l(\"this.adsManager\", this.adsManager);\r\n    this.adsManager.addEventListener(\r\n      window.google.ima.AdErrorEvent.Type.AD_ERROR,\r\n      (e) => { this.onAdError(e) });\r\n    this.adsManager.addEventListener(\r\n      window.google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED,\r\n      (e) => { this.onContentPauseRequested(e) });\r\n    this.adsManager.addEventListener(\r\n      window.google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED,\r\n      (e) => { this.onContentResumeRequested(e) });\r\n    this.adsManager.addEventListener(\r\n      window.google.ima.AdEvent.Type.LOADED,\r\n      (e) => { this.onAdLoaded(e) });\r\n\r\n\r\n    this.adsManager.addEventListener(\r\n      window.google.ima.AdEvent.Type.STARTED,\r\n      (e) => {\r\n        this.eventInfo(e);\r\n        this.status = this.videoStatus = \"playing\";\r\n        this.l('The timeout will be cleared');\r\n        clearTimeout(this.timeout);\r\n      });\r\n    this.adsManager.addEventListener(\r\n      window.google.ima.AdEvent.Type.FIRST_QUARTILE,\r\n      (e) => { this.eventInfo(e); });\r\n    this.adsManager.addEventListener(\r\n      window.google.ima.AdEvent.Type.MIDPOINT,\r\n      (e) => { this.eventInfo(e); });\r\n    this.adsManager.addEventListener(\r\n      window.google.ima.AdEvent.Type.THIRD_QUARTILE,\r\n      (e) => { this.eventInfo(e); });\r\n    this.adsManager.addEventListener(\r\n      window.google.ima.AdEvent.Type.COMPLETE,\r\n      (e) => {\r\n        this.eventInfo(e);\r\n        this.status = this.videoStatus = \"complete\";\r\n        this.l('Setting timeout to disable the ads if \"complete\" status will exceed timeout duration');\r\n        this.timeout = setTimeout(() => {\r\n          this.l('Timeout fired');\r\n          if (['paused', 'playing', 'all_complete'].includes(this.status)) {\r\n            this.l('It\\'s ok, going on');\r\n          }\r\n          else if (this.status === 'complete') {\r\n            this.l('Status is still \"complete\" on timeout, hiding');\r\n            this.hide();\r\n          }\r\n        }, this.timeoutDuration);\r\n\r\n      });\r\n    this.adsManager.addEventListener(\r\n      window.google.ima.AdEvent.Type.ALL_ADS_COMPLETED,\r\n      (e) => {\r\n        this.eventInfo(e);\r\n        this.status = \"all_complete\";\r\n        this.l('The timeout will be cleared');\r\n        clearTimeout(this.timeout);\r\n        this.controlsElement.remove();\r\n        this.logo.remove();\r\n        if (this.loop) {\r\n          this.refresh();\r\n        }\r\n      });\r\n    this.adsManager.addEventListener(\r\n      window.google.ima.AdEvent.Type.PAUSED,\r\n      (e) => {\r\n        this.eventInfo(e);\r\n        this.status = this.videoStatus = \"paused\";\r\n      });\r\n    this.adsManager.addEventListener(\r\n      window.google.ima.AdEvent.Type.RESUMED,\r\n      (e) => {\r\n        this.eventInfo(e);\r\n        this.status = this.videoStatus = \"playing\";\r\n      });\r\n    this.adsManager.addEventListener(\r\n      window.google.ima.AdEvent.Type.VIDEO_CLICKED,\r\n      (e) => {\r\n        this.eventInfo(e);\r\n        this.events.onClick();\r\n      });\r\n    this.adsManager.addEventListener(\r\n      window.google.ima.AdEvent.Type.IMPRESSION,\r\n      (e) => {\r\n        this.eventInfo(e);\r\n        this.events.onImpression();\r\n      });\r\n\r\n\r\n    this.processQueue();\r\n  }\r\n\r\n  eventInfo(e) {\r\n    let ad = e.getAd();\r\n    let podInfo = ad.getAdPodInfo();\r\n    this.lg(e.type + ' fired (' + podInfo.getAdPosition() + ')');\r\n    this.l('Ad data:', ad)\r\n    this.l('Remaining Time', this.adsManager.getRemainingTime());\r\n    this.l('Time has passed', ad.getDuration() - this.adsManager.getRemainingTime());\r\n    this.l('Ad Position', podInfo.getAdPosition());\r\n    this.l('Total Ads', podInfo.getTotalAds());\r\n    this.l('Max Duration', podInfo.getMaxDuration());\r\n\r\n    this.lge();\r\n  }\r\n\r\n  onAdError(adErrorEvent) {\r\n    this.l('Error fired', adErrorEvent.getError());\r\n    this.dropAdLoader(true);\r\n    this.hide();\r\n    this.events.onError();\r\n  }\r\n\r\n  onContentPauseRequested() {\r\n    this.l(\"Content pause requested\");\r\n    this.videoElement.pause();\r\n  }\r\n\r\n  onContentResumeRequested() {\r\n    this.l(\"Content resume requested\");\r\n    if (this.loop) {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  adContainerClick(event) {\r\n    this.l(\"Ad container clicked\");\r\n    if (this.videoElement.paused) {\r\n      this.l(\"Playing video\");\r\n      this.videoElement.play();\r\n    } else {\r\n      this.l(\"Pausing video\");\r\n      this.videoElement.pause();\r\n    }\r\n  }\r\n\r\n  onAdLoaded(adEvent) {\r\n    this.l(\"The ad is loaded\");\r\n    var ad = adEvent.getAd();\r\n    if (!ad.isLinear()) {\r\n      this.videoElement.play();\r\n    }\r\n  }\r\n\r\n  setWindowResizeEvent() {\r\n    window.addEventListener('resize', (event) => {\r\n      this.l(\"window resized\");\r\n      if (this.adsManager) {\r\n        var width = this.videoElement.clientWidth;\r\n        var height = this.videoElement.clientHeight;\r\n        this.adsManager.resize(width, height, window.google.ima.ViewMode.NORMAL);\r\n      }\r\n    });\r\n  }\r\n\r\n  addSoundButtonEvents() {\r\n    if (this.soundBtn) {\r\n      this.soundBtn.addEventListener('click', () => {\r\n        this.l('adMuted', this.adMuted)\r\n        if (this.adMuted) {\r\n          this.l('UNMUTING')\r\n          this.soundBtn.classList.remove('muted');\r\n          this.unmute();\r\n        }\r\n        else {\r\n          this.l('MUTING')\r\n          this.soundBtn.classList.add('muted');\r\n          this.mute();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  addPlayButtonEvents() {\r\n    if (this.playBtn) {\r\n      this.playBtn.addEventListener('click', () => {\r\n        this.l('videoStatus', this.videoStatus)\r\n        if (this.videoStatus === 'playing') {\r\n          this.l('pausing')\r\n          this.playBtn.classList.remove('playing');\r\n          this.pause();\r\n        }\r\n        else {\r\n          this.l('playing')\r\n          this.playBtn.classList.add('playing');\r\n          this.resume();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  addCloseButtonEvents() {\r\n    if (this.closeBtn) {\r\n      this.closeBtn.addEventListener('click', () => {\r\n        this.l('Close button clicked');\r\n        this.hide();\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  // Getters\r\n\r\n  getAdContainer() {\r\n    return this.adContainer;\r\n  }\r\n\r\n  getVideoElement() {\r\n    return this.videoElement;\r\n  }\r\n\r\n  getVideoContainer() {\r\n    return this.videoContainer;\r\n  }\r\n\r\n  // Debug\r\n\r\n  l(...args) {\r\n    if (this.debug) {\r\n      if (!this.debugGroupOpened)\r\n        console.log(this.debugLabel, this.debugStyles, ...args);\r\n      else\r\n        console.log(...args);\r\n    }\r\n  }\r\n\r\n  lg(label = \"\") {\r\n    if (this.debug && !this.debugGroupOpened) {\r\n      this.debugGroupOpened = true;\r\n      console.groupCollapsed(this.debugLabel, this.debugStyles, label);\r\n    }\r\n  }\r\n\r\n  lge() {\r\n    if (this.debug && this.debugGroupOpened) {\r\n      this.debugGroupOpened = false;\r\n      console.groupEnd();\r\n    }\r\n  }\r\n}\n\n//# sourceURL=webpack://ads/./src/drivers/vpaid_driver.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _drivers_html_driver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drivers/html_driver */ \"./src/drivers/html_driver.js\");\n/* harmony import */ var _drivers_image_driver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./drivers/image_driver */ \"./src/drivers/image_driver.js\");\n/* harmony import */ var _drivers_prebid_driver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drivers/prebid_driver */ \"./src/drivers/prebid_driver.js\");\n/* harmony import */ var _drivers_rewarded_driver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./drivers/rewarded_driver */ \"./src/drivers/rewarded_driver.js\");\n/* harmony import */ var _drivers_vk_driver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./drivers/vk_driver */ \"./src/drivers/vk_driver.js\");\n/* harmony import */ var _drivers_vk_inpage_driver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./drivers/vk_inpage_driver */ \"./src/drivers/vk_inpage_driver.js\");\n/* harmony import */ var _drivers_vpaid_driver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./drivers/vpaid_driver */ \"./src/drivers/vpaid_driver.js\");\n\n\n\n\n\n\n\n\n\n\nvar driver = (new URLSearchParams(window.location.search).get('driver')) ?? 'html';\nvar adUnit = null;\n////////////// HTML //////////////\nif (driver === 'html') {\n    adUnit = new _drivers_html_driver__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n        html: `\n            <div style=\"height:100%;\">\n                <a href=\"#\" \n                   style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;\">\n                    <span class=\"some-class\">1123123<\\/span>\n                <\\/a>\n                <script>\n                    console.log(1);\n                <\\/script>\n            </div>`,\n        debug: 1,       // optional\n        inIframe: true, // optional\n    });\n\n    adUnit.show(document.querySelector(\"#ad-container\"));\n}\n////////////// Image //////////////\nelse if (driver === 'image') {\n    adUnit = new _drivers_image_driver__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n        url: 'https://ih0.redbubble.net/image.234961683.5516/raf,360x360,075,t,fafafa:ca443f4786.jpg',\n        debug: 1,                                     // optional\n        inIframe: true,                               // optional\n        link: 'https://kinorole.ru/user_evgen/html/', // optional, next available if the link is set\n        inNewTab: true,                               // optional\n        title: 'Some string',                         // optional\n    });\n\n    adUnit.show(document.querySelector(\"#ad-container\"));\n}\n////////////// VK //////////////\nelse if (driver === 'vk') {\n    adUnit = new _drivers_vk_driver__WEBPACK_IMPORTED_MODULE_4__[\"default\"]({\n        slotId: 1303253,\n        adStyles: { // optional\n            width: '300px',\n            height: '250px'\n        },\n        debug: 1,   // optional\n    });\n\n    adUnit.show(document.querySelector(\"#ad-container\"));\n}\n////////////// VK InPage //////////////\nelse if (driver === 'inpage') {\n    adUnit = new _drivers_vk_inpage_driver__WEBPACK_IMPORTED_MODULE_5__[\"default\"]({\n        adStyles: {\n            width: '640px',\n            height: '360px'\n        },\n        slotId: 1351437,\n        debug: 1,\n    });\n\n    adUnit.show(document.querySelector(\"#ad-container\"));\n}\n\n////////////// VPAID //////////////\nelse if (driver === 'vpaid') {\n    adUnit = new _drivers_vpaid_driver__WEBPACK_IMPORTED_MODULE_6__[\"default\"]({\n        // container: document.getElementById('container-for-ad'), // optional\n        hash: 'SlpDFRDRBMzM1MzNBNzYwT01RPQ==',\n        widgetId: '3353',\n        debug: 1,          // optional\n        loop: true,        // optional\n    });\n\n    adUnit.show(document.querySelector(\"#ad-container\"));\n}\n////////////// VK Revarded //////////////////\nelse if (driver === 'rewarded') {\n    adUnit = new _drivers_rewarded_driver__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n        ads: {\n            desktop: {\n                blockId: \"R-A-3400167-4\",\n                type: \"fullscreen\",\n                platform: \"desktop\"\n\n            },\n            mobile: {\n                blockId: \"R-A-3400167-3\",\n                type: \"fullscreen\",\n                platform: \"touch\"\n            }\n        },\n        debug: 1\n\n    });\n\n    let button = document.createElement('button');\n    button.id = 'button';\n    button.innerHTML = 'Click me!';\n    document.body.appendChild(button);\n\n    adUnit.show('#button');\n}\n////////////// Prebid.js (one ad unit per time) //////////////////\nelse if (driver === 'prebid') {\n    let adUnitConfig = {\n        code: 'div-gpt-ad-300x250_stat',\n        mediaTypes: {\n            banner: {\n                sizes: [[300, 250]]\n            }\n        },\n        bids: [\n            {\n                bidder: \"adriver\",\n                params: {\n                    siteid: '381',\n                    placementId: '63:kinorole_prebid_stat_v2',\n                }\n            },\n            {\n                bidder: \"mytarget\",\n                params: {\n                    placementId: '1400510',\n                }\n            },\n            {\n                bidder: \"hybrid\",\n                params: {\n                    placement: \"banner\",\n                    placeId: \"64f880bab7ea06156069e73b\",\n                }\n            },\n            {\n                bidder: 'rtbsape',\n                params: {\n                    placeId: 860346,\n                }\n            },\n            {\n                bidder: 'buzzoola',\n                params: {\n                    placementId: '1253679',\n                }\n            },\n            {\n                bidder: 'between',\n                params: {\n                    s: '4713710',\n                }\n            },\n            {\n                bidder: 'otm',\n                params: {\n                    tid: '48885',\n                }\n            },\n        ]\n    };\n\n    let pbConfig = {\n        currency: {\n            adServerCurrency: \"RUB\",\n            granularityMultiplier: 1,\n            defaultRates: {\n                \"USD\": { \"RUB\": 98.308839595044 },\n                \"EUR\": { \"RUB\": 105.29277544434 },\n            }\n        },\n        firstPartyData: {\n            uaHints: [\n                \"architecture\",\n                \"model\",\n                \"platform\",\n                \"platformVersion\",\n                \"fullVersionList\"\n            ]\n        },\n        userSync: {\n            userIds: [{\n                name: \"sharedId\",\n                storage: {\n                    type: \"cookie\",\n                    name: \"_sharedid\",\n                    expires: 180\n                }\n            },\n            {\n                name: \"adriverId\"\n            },\n            {\n                name: 'pairId'\n            }\n            ]\n        },\n        realTimeData: {\n            auctionDelay: 100,\n            dataProviders: [\n                {\n                    \"name\": \"customGeolocation\",\n                    \"waitForIt\": true,\n                    \"params\": {\n                        geo: {\n                            coords: {\n                                latitude: 47.235072,\n                                longitude: 39.796736,\n                            },\n                            timestamp: 1695021033029\n                        }\n                    }\n                },\n                {\n                    \"name\": \"intersection\",\n                    \"waitForIt\": true\n                }\n            ],\n        },\n        enableTIDs: true,\n        deviceAccess: true,\n        allowActivities: {\n            syncUser: {\n                default: true,\n                rules: [\n                    { allow: true }\n                ]\n            },\n            accessDevice: {\n                default: true,\n                rules: [\n                    { allow: true }\n                ]\n            }\n        }\n    };\n\n\n    let adUnit = new _drivers_prebid_driver__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({ id: adUnitConfig.code, config: adUnitConfig, pbConfig: pbConfig });\n\n    adUnit.show(document.querySelector(\"#ad-container\"));\n\n\n}\n\n\n//# sourceURL=webpack://ads/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;